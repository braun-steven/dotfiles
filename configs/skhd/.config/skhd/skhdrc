#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
cmd+shift-return : emacsclient -c -n -a '' && sleep 0.25 && yabai -m window --focus $(yabai -m query --windows | jq '[.[] | select(.app == "Emacs")] | max_by(.id) | .id')

# cmd+shift-e : doom +everywhere
cmd + ctrl - return : /Users/steven/dotfiles/configs/dotbin/dotbin/skhd-iterm2-new-window.sh && yabai -m window --focus $(yabai -m query --windows | jq '[.[] | select(.app == "iTerm2")] | max_by(.id) | .id')
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty
# Open alacritty window:
# 1. try to use an exisiting alacritty server to create a new window (fastest)
# 2. if that fails, open the alacritty app
# 3. sleep shortly, such that yabai is able to detect the change (new window)
# 4. focus on latest alacritty window (window with highest id). This fixes an issue where if the focus was previously not on an alacritty window (e.g. safari), the new window would open but the focus stays on the old window (e.g. safari)
# cmd + ctrl - return : alacritty msg create-window || open -na /Applications/Alacritty.app && sleep 0.2 && yabai -m window --focus $(yabai -m query --windows | jq '[.[] | select(.app == "Alacritty")] | max_by(.id) | .id')
# cmd - return : alacritty msg create-window || open -na /Applications/Alacritty.app
# cmd + ctrl - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# cmd - return : kitty --single-instance -d ~
# cmd - return : open -na /Applications/Alacritty.app

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# for left/right: if it fails becaus this was the west-most/east-most window, try to switch displays
# this will make cmd -h/l work seamlessly over multiple monitors
cmd - h : yabai -m window --focus west || yabai -m display --focus west
cmd - l : yabai -m window --focus east || yabai -m display --focus east

# for up/down: try to switch focus in a stack first, if this fails (because there is no stack or because we are at the topmost or last element of the stack) focus the north/south window
cmd - j : yabai -m window --focus stack.next || yabai -m window --focus south
cmd - k : yabai -m window --focus stack.prev || yabai -m window --focus north

# move managed window
shift + cmd - h : yabai -m window --warp west  || yabai -m window --display west
shift + cmd - l : yabai -m window --warp east  || yabai -m window --display east
shift + cmd - j : yabai -m window --warp south 
shift + cmd - k : yabai -m window --warp north

# spaces
cmd - 1 : yabai -m space --focus 1 || yabai -m space --focus recent
cmd - 2 : yabai -m space --focus 2 || yabai -m space --focus recent
cmd - 3 : yabai -m space --focus 3 || yabai -m space --focus recent
cmd - 4 : yabai -m space --focus 4 || yabai -m space --focus recent
cmd - 5 : yabai -m space --focus 5 || yabai -m space --focus recent
cmd - 6 : yabai -m space --focus 6 || yabai -m space --focus recent
cmd - 7 : yabai -m space --focus 7 || yabai -m space --focus recent
cmd - 8 : yabai -m space --focus 8 || yabai -m space --focus recent
cmd - 9 : yabai -m space --focus 9 || yabai -m space --focus recent
cmd - 0 : yabai -m space --focus 10 || yabai -m space --focus recent
# cmd + ctrl - 6 : yabai -m space --focus 11 || yabai -m space --focus recent
# cmd + ctrl - 7 : yabai -m space --focus 12 || yabai -m space --focus recent
# cmd + ctrl - 8 : yabai -m space --focus 13 || yabai -m space --focus recent
# cmd + ctrl - 9 : yabai -m space --focus 14 || yabai -m space --focus recent
# cmd + ctrl - 0 : yabai -m space --focus 15 || yabai -m space --focus recent

cmd - y : yabai -m space --focus 11 || yabai -m space --focus recent
cmd - u : yabai -m space --focus 12 || yabai -m space --focus recent
# cmd - i : yabai -m space --focus 13 || yabai -m space --focus recent
# cmd - o : yabai -m space --focus 14 || yabai -m space --focus recent
# cmd - p : yabai -m space --focus 15 || yabai -m space --focus recent

# send window to desktop and follow focus
shift + cmd - 1 : yabai -m window --space 1
shift + cmd - 2 : yabai -m window --space 2
shift + cmd - 3 : yabai -m window --space 3
shift + cmd - 4 : yabai -m window --space 4
shift + cmd - 5 : yabai -m window --space 5
shift + cmd - 6 : yabai -m window --space 6
shift + cmd - 7 : yabai -m window --space 7
shift + cmd - 8 : yabai -m window --space 8
shift + cmd - 9 : yabai -m window --space 9
shift + cmd - 0 : yabai -m window --space 10
# shift + cmd + ctrl - 6 : yabai -m window --space 11
# shift + cmd + ctrl - 7 : yabai -m window --space 12
# shift + cmd + ctrl - 8 : yabai -m window --space 13
# shift + cmd + ctrl - 9 : yabai -m window --space 14
# shift + cmd + ctrl - 0 : yabai -m window --space 15

shift + cmd - y : yabai -m window --space 11
shift + cmd - u : yabai -m window --space 12
# shift + cmd - i : yabai -m window --space 13
# shift + cmd - o : yabai -m window --space 14
# shift + cmd - p : yabai -m window --space 15

cmd - q : yabai -m window --close

# Set insertion point for focused container
# shift + lctrl + cmd - h : yabai -m window --insert west
# shift + lctrl + cmd - j : yabai -m window --insert south
# shift + lctrl + cmd - k : yabai -m window --insert north
# shift + lctrl + cmd - l : yabai -m window --insert east
# cmd + alt - h : yabai -m window --insert east
# cmd + alt - v : yabai -m window --insert south

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# toggle fullscreen
alt + shift - f: yabai -m window --toggle native-fullscreen
# cmd + ctrl + shift - f : yabai -m window --toggle native-fullscreen
# cmd + ctrl + shift - f : yabai -m window --toggle zoom-fullscreen
# cmd + ctrl + alt - f : yabai -m window --toggle native-fullscreen

# toggle window split type
alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - f : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# cmd + alt - p : yabai -m window --toggle sticky;\
#            yabai -m window --toggle topmost;\
#            yabai -m window --toggle pip


# Restart yabai
# cmd + ctrl - r : /usr/bin/env osascript <<< \
#         "display notification \"Restarting Yabai\" with title \"Yabai\""; \
#         launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
cmd + ctrl - r : yabai --restart-service

# Stacking windows
alt - w : yabai -m window --stack east || yabai -m window --stack west
alt + shift - e : yabai -m config layout bsp
# cmd - e : yabai -m window --stack south || yabai -m window --stack north


# Resize windows
alt + cmd + shift - h : yabai -m window --resize left:-100:0; \
                  yabai -m window --resize right:-100:0
alt + cmd + shift - j : yabai -m window --resize bottom:0:100; \
                  yabai -m window --resize top:0:100
alt + cmd + shift - k : yabai -m window --resize top:0:-100; \
                  yabai -m window --resize bottom:0:-100
alt + cmd + shift - l : yabai -m window --resize right:100:0; \
                  yabai -m window --resize left:100:0
